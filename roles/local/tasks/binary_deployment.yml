---

# go Binary executable file 
  # ice via服务
- name: download ice via zip
  get_url:
    url: "{{ download_url }}/ice_via.zip"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"
  
# 调度服务
- name: download carrier binary
  get_url:
    url: "{{ download_url }}/carrier"
    dest: "{{ downloads_dir }}"
    mode: 0744
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

# keytool，生成 p2p 私钥
- name: download keytool binary
  get_url:
    url: "{{ download_url }}/keytool"
    dest: "{{ downloads_dir }}"
    mode: 0744
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

# consul 官网下载程序包
- name: download consul zip
  get_url:
    url: "{{ consul_download_url }}"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: yes
    timeout: 300 # 下载时间比较长
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

# Java JAR packages and Web static files
- name: download admin jar package
  get_url:
    url: "{{ download_url }}/admin.jar"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download admin Web static files
  get_url:
    url: "{{ download_url }}/admin.tar"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

# Python WHL file
- name: download avx2 latticex rosetta whl package
  get_url:
    url: "{{ download_url }}/avx2/{{ latticex_rosetta }}"
    dest: "{{ avx2 }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download no avx2 latticex rosetta whl package
  get_url:
    url: "{{ download_url }}/no_avx2/{{ latticex_rosetta }}"
    dest: "{{ no_avx2 }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download channel sdk whl package
  get_url:
    url: "{{ download_url }}/{{ channel_sdk }}"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download psi sdk whl package
  get_url:
    url: "{{ download_url }}/{{ latticex_psi }}"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download datum dcv whl package
  get_url:
    url: "{{ download_url }}/{{ fighter_dcv }}"
    dest: "{{ downloads_dir }}"
    mode: 0644
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

# Data and computing services startup scripts
- name: download start data script
  get_url:
    url: "{{ download_url }}/start_v3_service.sh"
    dest: "{{ downloads_dir }}"
    mode: 0744
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download start computer script
  get_url:
    url: "{{ download_url }}/start_v3_service.sh"
    dest: "{{ downloads_dir }}"
    mode: 0744
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"

- name: download mincoda sh file
  get_url:
    url: "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    dest: "{{ downloads_dir }}"
    mode:  0744
    force: yes
    validate_certs: yes
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 3
  delay: "{{ 10 | random }}"
