---

- name: create deploy directories
  file: path={{ item }} state=directory mode=0755
  with_items:
  - "{{ deploy_dir }}/admin"
  - "{{ deploy_dir }}/admin/sql"
  - "{{ deploy_dir }}/admin/scripts"
  - "{{ deploy_dir }}/admin/config"
  - "{{ deploy_dir }}/admin/cert"
  - "{{ deploy_dir }}/admin/cert/web"
  - "{{ deploy_dir }}/admin/logs"
  - "{{ deploy_dir }}/admin/network"

- name: set admin_log_dir facts
  set_fact:
    admin_log_dir: "{{ deploy_dir }}/admin/logs"

- name: "Deploy certificates"
  copy:
    src: "{{ admin_cert_dir }}/{{ item }}"
    dest: "{{ deploy_dir }}/admin/cert/{{ item }}"
    mode: 0600
    backup: yes
  with_items:
    - server.pem 
    - server.key

- name: "Deploy web certificates"
  copy:
    src: "{{ admin_cert_dir }}/web/{{ item }}"
    dest: "{{ deploy_dir }}/admin/cert/web/{{ item }}"
    mode: 0600
    backup: yes
  with_items:
    - server.pem 
    - server.key

- name: Set web certificate-related facts
  set_fact:
    admin_ssl_cetificate: "{{ deploy_dir }}/admin/cert/web/server.pem"
    admin_ssl_cetificate_key: "{{ deploy_dir }}/admin/cert/web/server.key"

- name: "Generate application-admin.yml configuration file based on application-admin.yml.j2 template file"
  template:
    src: "application-admin.yml.j2"
    dest: "{{ deploy_dir }}/admin/config/application-admin.yml"
    mode: 0600
    backup: yes

- name: "Copy database initialization script"
  copy:
    src: "{{ playbook_dir }}/config/admin.sql"
    dest: "{{ deploy_dir }}/admin/sql/admin.sql"
    mode: 0600
    backup: yes

- name: "copy admin jar package"
  copy:
    src: "{{ downloads_dir }}/admin.jar"
    dest: "{{ deploy_dir }}/admin/admin.jar"
    mode: 0600
    backup: yes

- name: "Copy the admin start script"
  template:
    src: "start_admin.sh.j2"
    dest: "{{ deploy_dir }}/admin/scripts/start_admin.sh"
    mode: 0755

- name: "Copy the admin stop script"
  template:
    src: "stop_admin.sh.j2"
    dest: "{{ deploy_dir }}/admin/scripts/stop_admin.sh"
    mode: 0755

# 安装依赖工具
- name: Install dependencies
  become: true
  apt: name={{ item }} state=installed update_cache=yes
  with_items:
    - unzip

# 拷贝 web 静态文件
- name: copy and extract admin.tar
  unarchive:
    src: "{{ downloads_dir }}/admin.tar"
    dest: "{{ deploy_dir }}/admin/network"

- name: set admin_web_static_dir facts
  set_fact:
    admin_web_static_dir: "{{ deploy_dir }}/admin/network"

# 安装 mysql
- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 86400 #One day

- name: Install the MySQL packages
  become: true
  apt: name={{ item }} state=installed update_cache=yes
  with_items:
    - mysql-server
    - mysql-client
    - python-mysqldb
    - libmysqlclient-dev
    - python-mysqldb

- name: "Installing mysql pip dependencies"
  pip:
    name: "{{ item }}"
    executable: pip3
    state: present
  with_items:
    - pymysql
    - mysqlclient

- name: Start the MySQL service
  become: true
  service: 
    name: mysql 
    state: started
    enabled: true

# 修改 mysql 绑定地址
- name: Modify mysql bind address
  become: true
  lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: "^bind-address"
    line: "bind-address   = 0.0.0.0"

# 设置时区为 utc
- name: mysql set time zone to utc
  become: true
  lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: "default-time_zone(.*)"
    line: "default-time_zone = '+0:00'"

# mysql 开启时间调度器
- name: mysql open time scheduler
  become: true
  lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: "^event_scheduler"
    line: "event_scheduler = on"

- name: restart the MySQL service
  become: true
  service:
    name: mysql
    state: restarted

# 获取 mysql 默认分配的用户名和密码
- name: Get the system default mysql username
  become: true
  shell: awk -v FS="=" '{print $1,$2}' /etc/mysql/debian.cnf | awk -F" *" '$1=="user" {print $2}' | head -n +1
  register: default_name_str
  failed_when: default_name_str.rc != 0
  changed_when: false

- name: set default_name facts
  set_fact:
    default_name: "{{ default_name_str.stdout | trim }}"

- name: Show default_name info 
  debug: 
    msg: default_name {{ default_name }}

- name: Get the system default mysql user password
  become: true
  shell: awk -v FS="=" '{print $1,$2}' /etc/mysql/debian.cnf | awk -F" *" '$1=="password" {print $2}' | head -n +1
  register: default_password_str
  failed_when: default_password_str.rc != 0
  changed_when: false

- name: set default_password facts
  set_fact:
    default_password: "{{ default_password_str.stdout | trim }}"

- name: Show default_password info 
  debug:
    msg: default_password {{default_password }}

# 更改 root 密码
- name: setting default root password
  mysql_user:
    login_user: "{{ default_name }}"
    login_password: "{{ default_password }}"
    name: root
    password: "{{ mysql_root_password }}"
    priv: "*.*:ALL,GRANT"

# 创建用户
- name: Create database user
  mysql_user:
    login_user: "{{ default_name }}"
    login_password: "{{ default_password }}"
    name: "{{ amin_user }}"
    password: "{{ admin_password }}"
    priv: '*.*:ALL'
    host: "%"
    state: present

# 检查datum_admin是否存在，如果存在则不需要导入admin.sql
- name: Check if database datum_admin exists
  shell: mysql -u{{ amin_user }} -p{{ admin_password }} -e "show databases;" 2>/dev/null |grep "datum_admin" |xargs echo -n
  register: database_name
  failed_when: database_name.rc != 0
  changed_when: false

- name: Show database_name info
  debug:
    msg: database_name exits {{database_name.stdout }}

# 初始化数据库
- name: Initialize database, create database and table
  shell: mysql -u{{ amin_user }} -p{{ admin_password }} < {{ deploy_dir }}/admin/sql/admin.sql
  register: result
  changed_when: false
  failed_when: result.rc != 0
  when: database_name.stdout!="datum_admin"


# 安装 nginx
- name: "install nginx"
  become: true
  apt:
    name: ['nginx']
    state: latest

- name: delete default nginx site
  become: true
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: "Generate datum-admin.platon.network.conf nginx configuration file based on datum-admin.platon.network.conf.j2 template file"
  become: true
  template:
    src: "datum-admin.platon.network.conf.j2"
    dest: "/etc/nginx/conf.d/datum-admin.platon.network.conf"
    mode: 0600

- name: restart nginx
  become: true
  service:
    name: nginx
    state: restarted

# java 环境
- name: Install jdk 8
  become: true
  apt:
    name: openjdk-8-jdk
    state: present