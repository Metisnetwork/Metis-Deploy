---

- name: create deploy directories
  file: path={{ item }} state=directory mode=0755
  with_items:
  - "{{ deploy_dir }}/data"
  - "{{ deploy_dir }}/data/config"
  - "{{ deploy_dir }}/data/cert"
  - "{{ deploy_dir }}/data/whl"
  - "{{ deploy_dir }}/data/data_root"
  - "{{ deploy_dir }}/data/contract_work_dir"
  - "{{ deploy_dir }}/data/result_root"

- name: set directory facts
  set_fact:
    data_root: "{{ deploy_dir }}/data/data_root"
    code_root_dir: "{{ deploy_dir }}/data/contract_work_dir"
    results_root_dir: "{{ deploy_dir }}/data/result_root"

- name: "Deploy certificates"
  copy:
    src: "{{ data_cert_dir }}/{{ item }}"
    dest: "{{ deploy_dir }}/data/cert/{{ item }}"
    mode: 0600
    backup: yes
  with_items:
    - server.pem 
    - server.key

- name: Set certificate-related facts
  set_fact:
    base_path: "{{ deploy_dir }}/data/cert/"

- name: "copy configuration file"
  template:
    src: "data.yml.j2"
    dest: "{{ deploy_dir }}/data/config/data.yml"
    mode: 0600
    backup: yes

# 安装依赖组件
- name: Install dependencies
  become: true
  apt: name={{ item }} state=installed update_cache=yes
  with_items:
    - libssl-dev

# copy Miniconda3-latest-Linux-x86_64.sh
- name: "copy Miniconda3 Executable file"
  copy:
    src: "{{ downloads_dir }}/Miniconda3-latest-Linux-x86_64.sh"
    dest: "{{ deploy_dir }}/miniconda.sh"
    mode: 0755
    backup: yes

# install conda
- name: Install conda
  shell : "([ ! -e {{deploy_dir}}/miniconda ] && ({{deploy_dir}}/miniconda.sh -b -p {{deploy_dir}}/miniconda && {{deploy_dir}}/miniconda/bin/conda init $(echo $SHELL | awk -F '/' '{print $NF}')))|cat"

# install python3.7.5
- name: Install python3.7
  shell: "([ ! -e {{deploy_dir}}/miniconda/envs/python375 ] && ({{deploy_dir}}/miniconda/bin/conda create --name python375 python=3.7.5 -y))|cat"

# Check whether the target machine CPU instruction
- name: Check whether the target machine CPU instruction set is avx2
  shell: cat /proc/cpuinfo |grep avx2 |cat
  register: cpu_check_result

- name: copy avx2 latticex_rosetta
  copy:
    src: "{{ downloads_dir }}/avx2/{{ latticex_rosetta }}"
    dest: "{{ deploy_dir }}/data/whl/{{ latticex_rosetta }}"
    mode: 0755
    backup: yes
  when: cpu_check_result.stdout!=""

- name: copy no avx2 latticex_rosetta
  copy:
    src: "{{ downloads_dir }}/no_avx2/{{ latticex_rosetta }}"
    dest: "{{ deploy_dir }}/data/whl/{{ latticex_rosetta }}"
    mode: 0755
    backup: yes
  when: cpu_check_result.stdout==""

# copy whl file
- name: "copy whl file"
  copy:
    src: "{{ downloads_dir }}/{{ item }}"
    dest: "{{ deploy_dir }}/data/whl/{{ item }}"
    mode: 0600
    backup: yes
  with_items:
    - "{{ channel_sdk }}"
    - "{{ metis_dcv }}"
    - "{{ latticex_psi }}"

# install whl file
- name: "install whl file"
  shell : "{{deploy_dir}}/miniconda/envs/python375/bin/python -m pip uninstall channel-sdk metis-dcv latticex-rosetta latticex-psi -y && {{deploy_dir}}/miniconda/envs/python375/bin/python -m pip install {{ deploy_dir }}/data/whl/{{'{'}}{{channel_sdk}},{{metis_dcv}},{{latticex_psi}},{{latticex_rosetta}}{{'}'}} {{python_proxy}}"
  args:
    executable: /bin/bash
# copy start.sh file
- name: "copy start.sh file"
  copy:
    src: "{{ downloads_dir }}/start_v3_service.sh"
    dest: "{{ deploy_dir }}/data/start_v3_service.sh"
    mode: 0755
    backup: yes